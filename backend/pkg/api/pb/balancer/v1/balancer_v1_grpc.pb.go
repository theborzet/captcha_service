// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: balancer_v1.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BalancerService_RegisterInstance_FullMethodName = "/balancer.v1.BalancerService/RegisterInstance"
)

// BalancerServiceClient is the client API for BalancerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BalancerServiceClient interface {
	RegisterInstance(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegisterInstanceRequest, RegisterInstanceResponse], error)
}

type balancerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBalancerServiceClient(cc grpc.ClientConnInterface) BalancerServiceClient {
	return &balancerServiceClient{cc}
}

func (c *balancerServiceClient) RegisterInstance(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RegisterInstanceRequest, RegisterInstanceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BalancerService_ServiceDesc.Streams[0], BalancerService_RegisterInstance_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RegisterInstanceRequest, RegisterInstanceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BalancerService_RegisterInstanceClient = grpc.BidiStreamingClient[RegisterInstanceRequest, RegisterInstanceResponse]

// BalancerServiceServer is the server API for BalancerService service.
// All implementations must embed UnimplementedBalancerServiceServer
// for forward compatibility.
type BalancerServiceServer interface {
	RegisterInstance(grpc.BidiStreamingServer[RegisterInstanceRequest, RegisterInstanceResponse]) error
	mustEmbedUnimplementedBalancerServiceServer()
}

// UnimplementedBalancerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBalancerServiceServer struct{}

func (UnimplementedBalancerServiceServer) RegisterInstance(grpc.BidiStreamingServer[RegisterInstanceRequest, RegisterInstanceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterInstance not implemented")
}
func (UnimplementedBalancerServiceServer) mustEmbedUnimplementedBalancerServiceServer() {}
func (UnimplementedBalancerServiceServer) testEmbeddedByValue()                         {}

// UnsafeBalancerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BalancerServiceServer will
// result in compilation errors.
type UnsafeBalancerServiceServer interface {
	mustEmbedUnimplementedBalancerServiceServer()
}

func RegisterBalancerServiceServer(s grpc.ServiceRegistrar, srv BalancerServiceServer) {
	// If the following call pancis, it indicates UnimplementedBalancerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BalancerService_ServiceDesc, srv)
}

func _BalancerService_RegisterInstance_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BalancerServiceServer).RegisterInstance(&grpc.GenericServerStream[RegisterInstanceRequest, RegisterInstanceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BalancerService_RegisterInstanceServer = grpc.BidiStreamingServer[RegisterInstanceRequest, RegisterInstanceResponse]

// BalancerService_ServiceDesc is the grpc.ServiceDesc for BalancerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BalancerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "balancer.v1.BalancerService",
	HandlerType: (*BalancerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterInstance",
			Handler:       _BalancerService_RegisterInstance_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "balancer_v1.proto",
}
